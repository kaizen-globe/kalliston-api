{"version":3,"file":"index.js","names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","Sequelize","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","DB_DIALECT","dialectOption","ssl","logging","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","require","join","DataTypes","name","Object","keys","modelName","associate"],"sources":["../../../../api/server/src/models/index.js"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\nconst config = configJson[env];\n\nconsole.log('this is the environment: ', env);\n\nconst db = {};\n\nlet sequelize;\n//if (config.environment === 'production') {\n  // sequelize = new Sequelize(\n  //     process.env[config.use_env_variable], config\n  // );\n  sequelize = new Sequelize(\n    process.env.DB_NAME,\n    process.env.DB_USER,\n    process.env.DB_PASS, {\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      dialect: process.env.DB_DIALECT,\n      dialectOption: {\n        ssl: true,\n        native: true\n      },\n      logging: true\n    }\n  );\n/*} else {\n  sequelize = new Sequelize(\n     config.database, config.username, config.password, config\n  );\n}*/\n\nfs\n  .readdirSync(__dirname)\n  .filter(file => {\n    return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach(file => {\n    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);\n    db[model.name] = model;\n  });\n\n// fs\n//   .readdirSync(__dirname)\n//   .filter((file) => {\n//     return (file.indexOf('.') !== 0) && \n//            (file !== basename) && (file.slice(-3) === '.js');\n//   })\n//   .forEach((file) => {\n//     const model = sequelize.import(path.join(__dirname, file));\n//     db[model.name] = model;\n//   });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AAEA,IAAMA,QAAQ,GAAGC,gBAAI,CAACD,QAAQ,CAACE,UAAU,CAAC;AAC1C,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAG,CAACE,QAAQ,GAAGD,OAAO,CAACD,GAAG,CAACE,QAAQ,GAAG,aAAa;AAEvE,IAAMC,MAAM,GAAGC,kBAAU,CAACJ,GAAG,CAAC;AAE9BK,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEN,GAAG,CAAC;AAE7C,IAAMO,EAAE,GAAG,CAAC,CAAC;AAEb,IAAIC,SAAS;AACb;AACE;AACA;AACA;AACAA,SAAS,GAAG,IAAIC,qBAAS,CACvBR,OAAO,CAACD,GAAG,CAACU,OAAO,EACnBT,OAAO,CAACD,GAAG,CAACW,OAAO,EACnBV,OAAO,CAACD,GAAG,CAACY,OAAO,EAAE;EACnBC,IAAI,EAAEZ,OAAO,CAACD,GAAG,CAACc,OAAO;EACzBC,IAAI,EAAEd,OAAO,CAACD,GAAG,CAACgB,OAAO;EACzBC,OAAO,EAAEhB,OAAO,CAACD,GAAG,CAACkB,UAAU;EAC/BC,aAAa,EAAE;IACbC,GAAG,EAAE,IAAI;IACT,UAAQ;EACV,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CACF;AACH;AACA;AACA;AACA;AACA;;AAEAC,cAAE,CACCC,WAAW,CAACC,SAAS,CAAC,CACtBC,MAAM,CAAC,UAAAC,IAAI,EAAI;EACd,OAAQA,IAAI,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAMD,IAAI,KAAK7B,QAAS,IAAK6B,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,KAAM;AACvF,CAAC,CAAC,CACDC,OAAO,CAAC,UAAAH,IAAI,EAAI;EACf,IAAMI,KAAK,GAAGC,OAAO,CAACjC,gBAAI,CAACkC,IAAI,CAACR,SAAS,EAAEE,IAAI,CAAC,CAAC,CAAClB,SAAS,EAAEC,qBAAS,CAACwB,SAAS,CAAC;EACjF1B,EAAE,CAACuB,KAAK,CAACI,IAAI,CAAC,GAAGJ,KAAK;AACxB,CAAC,CAAC;;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACC,IAAI,CAAC7B,EAAE,CAAC,CAACsB,OAAO,CAAC,UAACQ,SAAS,EAAK;EACrC,IAAI9B,EAAE,CAAC8B,SAAS,CAAC,CAACC,SAAS,EAAE;IAC3B/B,EAAE,CAAC8B,SAAS,CAAC,CAACC,SAAS,CAAC/B,EAAE,CAAC;EAC7B;AACF,CAAC,CAAC;AAEFA,EAAE,CAACC,SAAS,GAAGA,SAAS;AACxBD,EAAE,CAACE,SAAS,GAAGA,qBAAS;AAAC,eAEVF,EAAE;AAAA"}